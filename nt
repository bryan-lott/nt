#!/usr/bin/env python
import argparse
import os


DATASTORE_FILENAME = os.path.join(os.path.dirname(__file__),
                                  "datastore.md")


def parse_cli():
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--list", "-l",
                       help="list all notes",
                       action='store_true')
    group.add_argument("--text", "-t",
                       help="The text to save.",
                       type=str,
                       nargs='*')
    group.add_argument("--delete", "-d",
                       help="List notes and delete by note number",
                       action='store_true')
    args = parser.parse_args()
    if args.text:
        args.text = ' '.join(args.text)
    return args


def store_note(args):
    with open(DATASTORE_FILENAME, 'a') as db:
        db.write('- ' + args.text + '\n')


def _get_notes(args):
    notes = []
    with open(DATASTORE_FILENAME, 'r') as db:
        found_notes_section = False
        for line in db:
            if line.startswith("## notes"):
                found_notes_section = True
                continue
            if found_notes_section and line.startswith('-'):
                notes.append(line.replace('\n', ''))
    return notes


def delete_notes(args):
    with open(DATASTORE_FILENAME, 'r') as db:
        db_contents = db.readlines()

    note_number = None
    while note_number != 'q':
        notes = _get_notes(args)
        for i, note in enumerate(notes):
            print(f"{i} {note}")
        print('Enter the note number to be deleted, "q" to quit')
        note_number = input(": ")

        if note_number == 'q':
            continue

        with open(DATASTORE_FILENAME, 'w') as db:
            for line in db_contents:
                if not line.startswith(notes[int(note_number)]):
                    db.write(line + '\n')


def list_notes(args):
    notes = _get_notes(args)
    for note in notes:
        print(note)


if __name__ == '__main__':
    args = parse_cli()
    if args.text:
        fn = store_note
    elif args.list:
        fn = list_notes
    elif args.delete:
        fn = delete_notes
    else:
        fn = lambda args: print("Invalid syntax")

    fn(args)

